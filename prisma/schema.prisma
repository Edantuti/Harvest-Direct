generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Orders {
  id        String      @id @default(cuid())
  userId    String
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  ItemOrder ItemOrder[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ItemOrder {
  orderId String
  itemId  String
  item    Items  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  order   Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@id([orderId, itemId])
}

model Items {
  id          String      @id @default(cuid())
  name        String
  quantity    Int         @default(0)
  type        String
  photos      String[]
  rating      Decimal
  price       Int          @default(0)
  description String[]    @default([])
  details     String[]    @default([])
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  ItemOrder   ItemOrder[]
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  CartItem    CartItem[]
}

model Cart {
  id       String     @id @default(cuid())
  userid   String
  user     User       @relation(fields: [userid], references: [id], onDelete: Cascade)
  CartItem CartItem[]
}

model CartItem {
  cartId   String
  itemId   String
  quantity Int
  cart     Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  item     Items  @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([cartId, itemId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  farmer        Boolean   @default(false)
  accounts      Account[]
  items         Items[]
  Orders        Orders[]
  posts         Post[]
  sessions      Session[]
  Cart          Cart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
